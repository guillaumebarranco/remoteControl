<!DOCTYPE HTML>

<html>

    <head>
        <title>Remote Control</title>
        
        <meta name="viewport" content="width=device-width, initial-scale=1" user-scalable="yes" />
        <meta charset="UTF-8" />
        
        <style>

            body {
                background-color: black;
                overflow: hidden;
            }
            

            .my_button {
                //position: absolute;
                top: 200px;
            }

            .button_blue {
                left: 50px;
            }
            .button_green {
                left: 150px;
            }
            .button_red {
                left: 250px;
            }

            .button_purple {
                left: 50px;
                top: 100px;
            }
            .button_grey {
                left: 150px;
                top: 100px;
            }
            .button_yellow {
                padding: 30px;
                width: 250px;
                display: block;
                box-sizing: border-box;
                margin: 0 auto;
                margin-top: 200px;
            }

        </style>

    </head>

    <body>

        <!-- <button class="button_blue my_button" data-color="blue">Blue</button>
        <button class="button_green my_button" data-color="green">Green</button>
        <button class="button_red my_button" data-color="red">Red</button>

        <button class="button_purple my_button" data-color="purple">Purple</button>
        <button class="button_grey my_button" data-color="grey">Grey</button> -->


        <button class="button_yellow my_button" data-color="yellow">Lancer une Roquette</button>

        <script src="http://code.jquery.com/jquery-1.11.2.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="/connect_io.js"></script>

        <script>

            var mousePos = {
                x: 400,
                y: 300
            };

            var SCREEN_WIDTH = window.innerWidth,
                SCREEN_HEIGHT = window.innerHeight,
                canvas = document.createElement('canvas'),
                context = canvas.getContext('2d'),
                particles = [],
                rockets = [],
                MAX_PARTICLES = 400,
                colorCode = 0
            ;

            $(document).ready(function() {

                if($(window).width() < 1000) {

                    $('.my_button').on('click', function() {
                        var color = $(this).attr('data-color');
                        socket.emit('buttonColor', {color: color});
                    });

                } else {

                    document.body.appendChild(canvas);
                    canvas.width = SCREEN_WIDTH;
                    canvas.height = SCREEN_HEIGHT;
                    //setInterval(launch, 800);

                    launch();

                    setInterval(loop, 1000 / 50);

                    $('.my_button').hide();

                    socket.on('showColor', function(color) {
                        color = color.color;

                        launch();
                    });
                }

            });

            function launch() {
                launchFrom(rand(150, $(window).width() - 150));
            }

            function rand(min, max) {
                var the_random = Math.floor(Math.random() * (max - min + 1)) + min;
                return the_random;
            }

            function launchFrom(x) {
                if (rockets.length < 10) {
                    var rocket = new Rocket(x);
                    rocket.explosionColor = Math.floor(Math.random() * 360 / 10) * 10;
                    rocket.vel.y = Math.random() * -3 - 4;
                    rocket.vel.x = Math.random() * 6 - 3;
                    rocket.size = 8;
                    rocket.shrink = 0.999;
                    rocket.gravity = 0.01;
                    rockets.push(rocket);
                }
            }

            function loop() {
                // update screen size
                if (SCREEN_WIDTH != window.innerWidth) {
                    canvas.width = SCREEN_WIDTH = window.innerWidth;
                }
                if (SCREEN_HEIGHT != window.innerHeight) {
                    canvas.height = SCREEN_HEIGHT = window.innerHeight;
                }

                // clear canvas
                context.fillStyle = "rgba(0, 0, 0, 0.05)";
                context.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

                var existingRockets = [];

                for (var i = 0; i < rockets.length; i++) {
                    // update and render
                    rockets[i].update();
                    rockets[i].render(context);

                    // calculate distance with Pythagoras
                    var distance = Math.sqrt(Math.pow(400 - rockets[i].pos.x, 2) + Math.pow(mousePos.y - rockets[i].pos.y, 2));

                    // random chance of 1% if rockets is above the middle
                    var randomChance = rockets[i].pos.y < (SCREEN_HEIGHT * 2 / 3) ? (Math.random() * 100 <= 1) : false;

                    if (rockets[i].pos.y < SCREEN_HEIGHT / 5 || rockets[i].vel.y >= 0 || distance < 50 || randomChance) {
                        rockets[i].explode();
                    } else {
                        existingRockets.push(rockets[i]);
                    }
                }

                rockets = existingRockets;

                var existingParticles = [];

                for (var i = 0; i < particles.length; i++) {
                    particles[i].update();

                    // render and save particles that can be rendered
                    if (particles[i].exists()) {
                        particles[i].render(context);
                        existingParticles.push(particles[i]);
                    }
                }

                // update array with existing particles - old particles should be garbage collected
                particles = existingParticles;

                while (particles.length > MAX_PARTICLES) {
                    particles.shift();
                }
            }

            function Particle(pos) {
                this.pos = {
                    x: pos ? pos.x : 0,
                    y: pos ? pos.y : 0
                };
                this.vel = {
                    x: 0,
                    y: 0
                };
                this.shrink = .97;
                this.size = 2;

                this.resistance = 1;
                this.gravity = 0;

                this.flick = false;

                this.alpha = 1;
                this.fade = 0;
                this.color = 0;
            }

            Particle.prototype.update = function() {
                // apply resistance
                this.vel.x *= this.resistance;
                this.vel.y *= this.resistance;

                // gravity down
                this.vel.y += this.gravity;

                // update position based on speed
                this.pos.x += this.vel.x;
                this.pos.y += this.vel.y;

                // shrink
                this.size *= this.shrink;

                // fade out
                this.alpha -= this.fade;
            };

            Particle.prototype.render = function(c) {
                if (!this.exists()) {
                    return;
                }

                c.save();

                c.globalCompositeOperation = 'lighter';

                var x = this.pos.x,
                    y = this.pos.y,
                    r = this.size / 2;

                var gradient = c.createRadialGradient(x, y, 0.1, x, y, r);
                gradient.addColorStop(0.1, "rgba(255,255,255," + this.alpha + ")");
                gradient.addColorStop(0.8, "hsla(" + this.color + ", 100%, 50%, " + this.alpha + ")");
                gradient.addColorStop(1, "hsla(" + this.color + ", 100%, 50%, 0.1)");

                c.fillStyle = gradient;

                c.beginPath();
                c.arc(this.pos.x, this.pos.y, this.flick ? Math.random() * this.size : this.size, 0, Math.PI * 2, true);
                c.closePath();
                c.fill();

                c.restore();
            };

            Particle.prototype.exists = function() {
                return this.alpha >= 0.1 && this.size >= 1;
            };

            function Rocket(x) {
                Particle.apply(this, [{
                    x: x,
                    y: SCREEN_HEIGHT}]);

                this.explosionColor = 0;
            }

            Rocket.prototype = new Particle();
            Rocket.prototype.constructor = Rocket;

            Rocket.prototype.explode = function() {
                var count = Math.random() * 10 + 80;

                for (var i = 0; i < count; i++) {
                    var particle = new Particle(this.pos);
                    var angle = Math.random() * Math.PI * 2;

                    // emulate 3D effect by using cosine and put more particles in the middle
                    var speed = Math.cos(Math.random() * Math.PI / 2) * 15;

                    particle.vel.x = Math.cos(angle) * speed;
                    particle.vel.y = Math.sin(angle) * speed;

                    particle.size = 10;

                    particle.gravity = 0.2;
                    particle.resistance = 0.92;
                    particle.shrink = Math.random() * 0.05 + 0.93;

                    particle.flick = true;
                    particle.color = this.explosionColor;

                    particles.push(particle);
                }
            };

            Rocket.prototype.render = function(c) {
                if (!this.exists()) {
                    return;
                }

                c.save();

                c.globalCompositeOperation = 'lighter';

                var x = this.pos.x,
                    y = this.pos.y,
                    r = this.size / 2;

                var gradient = c.createRadialGradient(x, y, 0.1, x, y, r);
                gradient.addColorStop(0.1, "rgba(255, 255, 255 ," + this.alpha + ")");
                gradient.addColorStop(1, "rgba(0, 0, 0, " + this.alpha + ")");

                c.fillStyle = gradient;

                c.beginPath();
                c.arc(this.pos.x, this.pos.y, this.flick ? Math.random() * this.size / 2 + this.size / 2 : this.size, 0, Math.PI * 2, true);
                c.closePath();
                c.fill();

                c.restore();
            };

        </script>

    </body>
</html>
